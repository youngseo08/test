import streamlit as st
import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import matplotlib.pyplot as plt

tabs = ["Main","수출 분석", "수출액 예측", "포트폴리오"]
active_tab = st.sidebar.selectbox("Select a tab", tabs)

if active_tab == "Main":
    pass

elif active_tab == "수출 분석":
    with st.sidebar:
        st.sidebar.header('원하는 국가의 수출량을 확인해보세요')
        select_countries = st.sidebar.selectbox('국가명',['그리스', '네덜란드', '노르웨이', '덴마크', '독일', '멕시코', '미국', '벨기에', '스웨덴',
       '스페인', '슬로바키아', '슬로베니아', '에스토니아', '영국', '오스트리아', '이스라엘', '이탈리아',
       '일본', '체코공화국', '칠레', '캐나다', '포루투갈', '폴란드', '프랑스', '핀란드', '헝가리'])
        st.sidebar.header('원하는 품목의 수출량을 확인해보세요')
        select_hs = st.sidebar.selectbox('품목명 (HS CODE)',[271019, 284190, 284990, 290531, 290539, 320417, 330499, 350691,
        381800, 382200, 382440, 390110, 390230, 390330, 390690, 390730,
        390740, 390799, 391810, 391990, 392062, 392119, 392190, 392690,
        401110, 401120, 540761, 590320, 590390, 630900, 721030, 721049,
        722599, 722830, 730890, 732619, 732690, 741999, 760612, 820730,
        820900, 840290, 840734, 840991, 840999, 841330, 841340, 841490,
        841590, 841899, 841939, 842139, 842199, 842890, 843149, 847330,
        847950, 847989, 847990, 848071, 848180, 848190, 848210, 848310,
        848330, 848350, 848690, 850300, 850440, 850490, 850710, 850760,
        850790, 851140, 851220, 851290, 851490, 851590, 851660, 851712,
        851770, 852351, 852610, 852990, 853224, 853340, 853400, 853710,
        853890, 854140, 854231, 854232, 854239, 854370, 854442, 854470,
        870321, 870322, 870323, 870332, 870421, 870829, 870830, 870840,
        870850, 870893, 870894, 870899, 880330, 900190, 900319, 901812,
        901849, 903180, 903289, 940540, 950699, 210111, 293299, 294190,
        390120, 390210, 390390, 481190, 611610, 650610, 722020, 760711,
        842121, 842710, 842720, 847982, 851150, 854460, 854590, 870324,
        390710, 400219, 550320, 691110, 760120, 721070, 721934, 860900,
        880320, 741011, 840890, 392520, 720292, 720851, 841430, 842952,
        853530, 720916, 721061, 854290, 730840, 740911, 845020, 721069,
        722300, 870210, 721391, 840733, 842699, 841510, 845710, 842211,
        902213, 390320, 710691, 391239, 540211, 291739, 240220, 820719,
        722592, 850213, 722550, 391110, 850434, 292910, 846249, 271012,
        280700, 291736, 400220, 711031, 720827, 720838, 720839, 720917,
        722519, 842951, 845811, 871000, 291532, 720270, 730511, 240319,
        721633, 711021, 711019, 845891, 382600, 711292, 290723, 291733,
        732182, 845129, 890120, 720837, 853529, 841810, 890190, 845521,
        720219, 890520, 841861, 292610, 252310])

elif active_tab == "수출액 예측":
    with st.sidebar:
        st.sidebar.header('원하는 국가의 예측 수출액을 확인해보세요')
        select_countries2 = st.sidebar.selectbox('국가명',['그리스', '네덜란드', '노르웨이', '덴마크', '독일', '멕시코', '미국', '벨기에', '스웨덴',
       '스페인', '슬로바키아', '슬로베니아', '에스토니아', '영국', '오스트리아', '이스라엘', '이탈리아',
       '일본', '체코공화국', '칠레', '캐나다', '포루투갈', '폴란드', '프랑스', '핀란드', '헝가리'])
        st.sidebar.header('원하는 품목의 예측 수출액을 확인해보세요')
        select_hs2 = st.sidebar.selectbox('품목명 (HS CODE)',[271019, 284190, 284990, 290531, 290539, 320417, 330499, 350691,
        381800, 382200, 382440, 390110, 390230, 390330, 390690, 390730,
        390740, 390799, 391810, 391990, 392062, 392119, 392190, 392690,
        401110, 401120, 540761, 590320, 590390, 630900, 721030, 721049,
        722599, 722830, 730890, 732619, 732690, 741999, 760612, 820730,
        820900, 840290, 840734, 840991, 840999, 841330, 841340, 841490,
        841590, 841899, 841939, 842139, 842199, 842890, 843149, 847330,
        847950, 847989, 847990, 848071, 848180, 848190, 848210, 848310,
        848330, 848350, 848690, 850300, 850440, 850490, 850710, 850760,
        850790, 851140, 851220, 851290, 851490, 851590, 851660, 851712,
        851770, 852351, 852610, 852990, 853224, 853340, 853400, 853710,
        853890, 854140, 854231, 854232, 854239, 854370, 854442, 854470,
        870321, 870322, 870323, 870332, 870421, 870829, 870830, 870840,
        870850, 870893, 870894, 870899, 880330, 900190, 900319, 901812,
        901849, 903180, 903289, 940540, 950699, 210111, 293299, 294190,
        390120, 390210, 390390, 481190, 611610, 650610, 722020, 760711,
        842121, 842710, 842720, 847982, 851150, 854460, 854590, 870324,
        390710, 400219, 550320, 691110, 760120, 721070, 721934, 860900,
        880320, 741011, 840890, 392520, 720292, 720851, 841430, 842952,
        853530, 720916, 721061, 854290, 730840, 740911, 845020, 721069,
        722300, 870210, 721391, 840733, 842699, 841510, 845710, 842211,
        902213, 390320, 710691, 391239, 540211, 291739, 240220, 820719,
        722592, 850213, 722550, 391110, 850434, 292910, 846249, 271012,
        280700, 291736, 400220, 711031, 720827, 720838, 720839, 720917,
        722519, 842951, 845811, 871000, 291532, 720270, 730511, 240319,
        721633, 711021, 711019, 845891, 382600, 711292, 290723, 291733,
        732182, 845129, 890120, 720837, 853529, 841810, 890190, 845521,
        720219, 890520, 841861, 292610, 252310])

elif active_tab == "포트폴리오":
    with st.sidebar:
        st.sidebar.header('원하는 포트폴리오의 연도를 입력해주세요')
        select_year = st.sidebar.selectbox('연도',['2022'])


if active_tab == "Main":
    st.title("한국 수출 포트폴리오 최적화 서비스")
    st.markdown("""---""")
    st.image('ship.jpg')
    st.subheader("머신러닝을 이용한 수출 예측 데이터를 기반으로, 안정 성장형 수출 포트폴리오 제공")
    st.write("  ")
    st.markdown('**주요 기능 소개**')
    st.markdown('🥇 현재 우리나라 수출 분석')
    st.markdown('🥈 국가별, 품목별 향후 수출액 예측')
    st.markdown('🥉 최적 포트폴리오 제공')

elif active_tab == "수출 분석":
    st.title("현재 우리나라 수출 분석")
    st.markdown("""---""")
    st.write("**5년치 데이터를 통해 대략적인 우리나라의 수출 구성을 확인할 수 있습니다.**")
    st.subheader("국가별 수출 순위")
    tab1, tab2= st.tabs(['Tab A' , 'Tab B'])
    with tab1:
    #tab A 를 누르면 표시될 내용
        X = pd.read_csv('X.csv')
        df3 = X[X['expDlr']>0]
        X_group = df3.groupby(['국가명'], as_index=False).agg(mean_exp=('expDlr', 'mean'))
        X_group = X_group.sort_values('mean_exp', ascending=False)
        X_group.rename(columns={'mean_exp' : '평균 수출액'}, inplace=True)
        fig = px.bar(X_group, x = '국가명',y='평균 수출액')
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig)
    with tab2:
    #tab B를 누르면 표시될 내용 
        st.table(X_group)

    st.subheader("품목별 수출 순위")
    tab1, tab2= st.tabs(['Tab A' , 'Tab B'])
    with tab1:
    #tab A 를 누르면 표시될 내용
        X_group2 = df3.groupby(['HS6'], as_index=False).agg(mean_exp=('expDlr', 'mean'))
        X_group2 = X_group2.sort_values('mean_exp', ascending=False)
        X_group2.rename(columns={'mean_exp' : '평균 수출액'}, inplace=True)
        st.line_chart(data = X_group2, x ='HS6', y='평균 수출액')
    #tab B를 누르면 표시될 내용
    with tab2:
        st.write('상위 10개의 6자리 HS코드만 나타내었습니다.')
        st.table(X_group2.head(10))
    st.markdown("""---""")
    st.write('**선택한 조건의 수출 데이터를 직접적으로 확인할 수 있습니다.**')
    st.subheader(f"{select_countries} 수출 동향")
    st.write('연도별 동향을 나타냈습니다')
    ct_td = X[X['국가명']==select_countries]
    ct_td = ct_td.drop('Unnamed: 0', axis=1)
    fig3 = px.bar(ct_td, x = 'YEAR',y='expDlr', color='YEAR')
    st.plotly_chart(fig3)
    st.write('월별 동향을 나타냈습니다')
    fig4 = px.bar(ct_td, x = 'MON',y='expDlr', color='MON')
    st.plotly_chart(fig4)
    st.subheader(f'{select_countries}의 {select_hs} 품목 수출 동향')
    st.write('연도별 동향을 나타냈습니다')
    ct_td = X[X['HS6']==select_hs]
    ct_td = ct_td.drop('Unnamed: 0', axis=1)
    fig5 = px.bar(ct_td, x = 'YEAR',y='expDlr', color='YEAR')
    st.plotly_chart(fig5)
    st.write('월별 동향을 나타냈습니다')
    fig6 = px.bar(ct_td, x = 'MON',y='expDlr', color='MON')
    st.plotly_chart(fig6)
    st.markdown("""---""")
    st.write('**선택한 조건의 수출 데이터를 다른 국가 및 폼목과 쉽게 비교할 수 있습니다.**')
    st.subheader("동일한 품목별 유망한 국가")
    selected_erea = st.multiselect(f'{select_hs} 품목의 수출액을 여러 국가에서 비교할 수 있습니다', ['그리스', '네덜란드', '노르웨이', '덴마크', '독일', '멕시코', '미국', '벨기에', '스웨덴',
       '스페인', '슬로바키아', '슬로베니아', '에스토니아', '영국', '오스트리아', '이스라엘', '이탈리아',
       '일본', '체코공화국', '칠레', '캐나다', '포루투갈', '폴란드', '프랑스', '핀란드', '헝가리'], default={select_countries})
    c_g = X[(X['국가명'].isin(selected_erea))]
    c_g = c_g[c_g['HS6']==select_hs]
    st.write(px.bar(c_g, x='YEAR', y='expDlr' ,color='국가명'))
    st.subheader("국가별 유망 품목")
    selected_erea2 = st.multiselect(f'{select_countries}에서 여러 품목의 수출액을 비교할 수 있습니다', [271019, 284190, 284990, 290531, 290539, 320417, 330499, 350691,
        381800, 382200, 382440, 390110, 390230, 390330, 390690, 390730,
        390740, 390799, 391810, 391990, 392062, 392119, 392190, 392690,
        401110, 401120, 540761, 590320, 590390, 630900, 721030, 721049,
        722599, 722830, 730890, 732619, 732690, 741999, 760612, 820730,
        820900, 840290, 840734, 840991, 840999, 841330, 841340, 841490,
        841590, 841899, 841939, 842139, 842199, 842890, 843149, 847330,
        847950, 847989, 847990, 848071, 848180, 848190, 848210, 848310,
        848330, 848350, 848690, 850300, 850440, 850490, 850710, 850760,
        850790, 851140, 851220, 851290, 851490, 851590, 851660, 851712,
        851770, 852351, 852610, 852990, 853224, 853340, 853400, 853710,
        853890, 854140, 854231, 854232, 854239, 854370, 854442, 854470,
        870321, 870322, 870323, 870332, 870421, 870829, 870830, 870840,
        870850, 870893, 870894, 870899, 880330, 900190, 900319, 901812,
        901849, 903180, 903289, 940540, 950699, 210111, 293299, 294190,
        390120, 390210, 390390, 481190, 611610, 650610, 722020, 760711,
        842121, 842710, 842720, 847982, 851150, 854460, 854590, 870324,
        390710, 400219, 550320, 691110, 760120, 721070, 721934, 860900,
        880320, 741011, 840890, 392520, 720292, 720851, 841430, 842952,
        853530, 720916, 721061, 854290, 730840, 740911, 845020, 721069,
        722300, 870210, 721391, 840733, 842699, 841510, 845710, 842211,
        902213, 390320, 710691, 391239, 540211, 291739, 240220, 820719,
        722592, 850213, 722550, 391110, 850434, 292910, 846249, 271012,
        280700, 291736, 400220, 711031, 720827, 720838, 720839, 720917,
        722519, 842951, 845811, 871000, 291532, 720270, 730511, 240319,
        721633, 711021, 711019, 845891, 382600, 711292, 290723, 291733,
        732182, 845129, 890120, 720837, 853529, 841810, 890190, 845521,
        720219, 890520, 841861, 292610, 252310], default={select_hs})
    c_g = X[(X['HS6'].isin(selected_erea2))]
    c_g = c_g[c_g['국가명']==select_countries]
    st.write(px.bar(c_g, x='YEAR', y='expDlr', color='HS6'))

elif active_tab == "수출액 예측":
    st.title('수출액 예측 서비스')
    st.markdown("""---""")
    st.write('예측 성능을 보여드리기 위해 현재 시점을 2021년 12월로 가정했습니다.')
    st.write('따라서 위 시점을 기준으로 1년 이후 동안의 수출액을 예측하실 수 있습니다.')
    st.subheader(f'최근 1년 동안의 "{select_countries2}-{select_hs2}" 수출액 예측 그래프')
    df2 = pd.read_csv('df2.csv')
    df_td = df2.loc[(df2.HS6==select_hs2) & (df2.국가명 == select_countries2) ,]
    df_td = df_td.drop('Unnamed: 0', axis=1)
    df_td['날짜'] = df_td['YEAR'].astype(str) + '_' + df_td['MON'].astype(str)
    df_td_renamed = df_td.rename(columns={'expDlr': '실제 수출액', 'prediction': '예측된 수출액'})
    st.line_chart(data = df_td_renamed, x= "MON", y =['실제 수출액', "예측된 수출액"])
    st.table(df_td_renamed.head())
    st.write('**현재 시점에서는 알 수 없지만, 성능을 알아보기 위해 실제 수출액과 예측한 수출액을 비교한 그래프입니다.**')

elif active_tab == "포트폴리오":
    st.title("최적 포트폴리오 제공")
    st.markdown("""---""")
    # 조건부와 같이 사용할 수 있다.
    if st.button('포트폴리오 제작'):
        st.write("포트폴리오를 구성 중입니다. 약 2~5분이 소요됩니다.")
        st.image('portfolio.jpg')
        st.write('예측된 수출액을 기준으로 최적의 포트폴리오를 구성하였습니다. 각 국가별 상위 품목 10가지에 대한 최적 수출 비율을 확인할 수 있습니다.')
    def main() :

        #     # 체크박스 : 체크 해제/ 체크
        #     # 두개 동작중 하나를 한다. 체크하면 TRUE가 된다.

        if st.checkbox('**수익률 중점형**') :
            best_portfolio = pd.read_csv('best_portfolio.csv')
            best_portfolio = best_portfolio.drop('Unnamed: 0', axis=1)
            max_shape = best_portfolio.loc[best_portfolio['Shape'] == best_portfolio['Shape'].max()]
            max_returns = best_portfolio.loc[best_portfolio['Returns'] == best_portfolio['Returns'].max()]
            # 리스크칼럼에서 가장 낮은 리스크 구하기
            min_risk = best_portfolio.loc[best_portfolio['Risk'] == best_portfolio['Risk'].min()]
            st.table(max_returns)
            st.write('연간 수익률 : **1.12%**')
            st.write('연간 리스크 : **0.83%**')
        if st.checkbox('**리스크 중점형**') :
            st.table(min_risk)
            st.write('연간 수익률 : **0.37%**')
            st.write('연간 리스크 : **0.30%**')   
        if st.checkbox('**안정 성장형**') :
            st.table(max_shape)
            st.write('연간 수익률 : **0.64%**')
            st.write('연간 리스크 : **0.40%**')


    if __name__ == "__main__" :
        main()


    